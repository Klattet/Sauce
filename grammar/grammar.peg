\i # Flag for the parser to ignore capitalisation

# ----------------------------------------------------------------------------------------------------
# LITERALS
# Short:
#   A literal expression is a single lexeme that is itself a valid expression.
# ----------------------------------------------------------------------------------------------------

integer     <- [0-9]+({[_]}{}[0-9]+)*![A-Za-z_]
binary      <- "0b"{[01]+({[_]}{}[01]+)*}![A-Za-z2-9_]
octal       <- "0o"{[0-7]+({[_]}{}[0-7]+)*}![a-f89_]
hexadecimal <- "0x"{[a-f0-9]+({[_]}{}[a-f0-9]+)*}![G-Zg-z_]
identifier  <- !keyword[A-Za-z][A-Za-z0-9]*({[_]}{}[A-Za-z0-9]+)*![_]
string      <- "\""{(({"\\"}{})([\34\92]/{[a-f0-9][a-f0-9][a-f0-9][a-f0-9]})/(!"\""_))*}"\""
character   <- "c\""{({"\\"}{})([\34\92]/{[a-f0-9][a-f0-9]})/(!"\"".)}"\""
bytestring  <- "b\""{(({"\\"}{})([\34\92]/{[a-f0-9][a-f0-9]})/(!"\"".))*}"\""

# ----------------------------------------------------------------------------------------------------
# OPERATORS
# Short:
#   An operator is a lexeme that is composed entirely of a special collection of
#   symbols, similar to a word but in a different category.
#
# Detailed:
#   An operator represents the identifier of a special function or procedure, but
#   has a different calling syntax. Either prefix, postfix or infix depending on the
#   definition of the procedure.
#
#   When an operator is used in an expression, it is called an operator expression.
#   There are two types of operator expressions: Unary and binary.
#   Unary expressions involve p
# ----------------------------------------------------------------------------------------------------

# ----------------------------------------------------------------------------------------------------
# KEYWORDS
# Short:
#   A keyword is a member of a special collection of lexemes that cannot
#   be used like identifiers despite looking like them.
#
# Detailed:
#   Although some keywords are re-used in multiple context scenarios, the grammar
#   is designed to ensure you will never misinterpret the meaning of a keyword
#   while reading code, presuming you know what the keyword represents in general.
#   All keywords serve a similar purpose in all contexts where they are defined.
#
#   All keywords are English words that have been truncated to 3 characters or less.
#   That is simply an aesthetic choice meant to elicit a pattern where statements
#   and expressions tend to line up vertically in the source code of a program.
#   It was inspired by assembly code, as most of the common traditional opcodes in
#   assembly languages are 3 characters wide (such as JMP, MOV, CMP, ADD for example).
#   Although Sauce is not an assembly language, it is meant to look similar to one in some ways.
#
#   Keywords are case insensitive, but please pick one style and be consistent.
#   Not being able to use keywords with different capitalisation as identifiers is a non-issue.
#   If your identifiers collide with keywords, it is a you-issue. Define better identifier names.
# ----------------------------------------------------------------------------------------------------

# BRANCHING
if  <- "if"![a-z0-9_]
or  <- "or"![a-z0-9_]

# VARIABLES
def <- "def"![a-z0-9_]
val <- "val"![a-z0-9_]
var <- "var"![a-z0-9_]

# ROUTINES
fun <- "fun"![a-z0-9_]
pro <- "pro"![a-z0-9_]
ret <- "ret"![a-z0-9_]

# TYPES
typ <- "typ"![a-z0-9_]

# LINKING
of  <- "of"![a-z0-9_]
is  <- "is"![a-z0-9_]


keyword <- (
    if / or / def / val / var / fun / pro / typ / of / is
)

# ----------------------------------------------------------------------------------------------------
# BRANCHING
# A branching statement is
# ----------------------------------------------------------------------------------------------------
